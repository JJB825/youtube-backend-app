Two ways of connecting database:
1. directly in index.js 
2. modularising it in separate folder called db and importing it in index.js

Database connection:
-> There can be errors or problems, always safe to wrap in try-catch block or resolve-reject promise
-> database connection always requires time, so use async await 

app.on() method for handling express app errors

Express App:
req.params: used to fetch data from url
req.body: used to fetch json or forms data

cookie-parser: middleware for handling cookies
cors: cross origin resource sharing
app.use() method for handling middlewares or configuration settings

cors: origin parameter defines the source which can make requests to server
* in origin means all sources(not recommended usually)

cookie parser is used to setup backend for receiving different data formats from different parts
used for accessing and setting user's browser's cookies

for handling data from url, (url uses special encoding for sending data)
extended: true allows for nested objects sending

nodejs provides an error class that helps us to handle api errors 
wwe can override those classes using inheritance in js to standardise error handling process

mongodb aggregatation pipeline:
mongoose-aggregate-paginate-v2: allows to write aggregation queries

both based on cryptography
bcrypt: helps you to hash password
jwt: json web tokens
-> consists of headers, which contains algorithm used and type of token
-> and payload, the data stored in token, ie the user details/credentials
-> verification signature: consists secret key that makes the token unique
-> is a bearer token, it's like whoever has this token and sends it to the server, the server will send data to that user 