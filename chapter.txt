Two ways of connecting database:
1. directly in index.js 
2. modularising it in separate folder called db and importing it in index.js

Database connection:
-> There can be errors or problems, always safe to wrap in try-catch block or resolve-reject promise
-> database connection always requires time, so use async await 

app.on() method for handling express app errors

Express App:
req.params: used to fetch data from url
req.body: used to fetch json or forms data

cookie-parser: middleware for handling cookies
cors: cross origin resource sharing
app.use() method for handling middlewares or configuration settings

cors: origin parameter defines the source which can make requests to server
* in origin means all sources(not recommended usually)

cookie parser is used to setup backend for receiving different data formats from different parts
used for accessing and setting user's browser's cookies

for handling data from url, (url uses special encoding for sending data)
extended: true allows for nested objects sending

nodejs provides an error class that helps us to handle api errors 
wwe can override those classes using inheritance in js to standardise error handling process

mongodb aggregatation pipeline:
mongoose-aggregate-paginate-v2: allows to write aggregation queries

both based on cryptography
bcrypt: helps you to hash password
jwt: json web tokens
-> consists of headers, which contains algorithm used and type of token
-> and payload, the data stored in token, ie the user details/credentials
-> verification signature: consists secret key that makes the token unique
-> is a bearer token, it's like whoever has this token and sends it to the server, the server will send data to that user 

file upload, image upload is usually a common task that it is made a utility function and used wherever needed
cloudinary -> biggest and most used platform for file upload

multer and express-file upload both packages can be used for file upload
cloudinary is a service (sdk), file upload requires multer 
Process of storing files on cloudinary:
1. takes files from user and store it in local server
2. then take file from local server and upload it on cloudinary server

for file handling use nodejs file handling
unlink in file handling means unlinking file from file system: when we delete from file, the file stays there but gets unlinked from file system

implementing multer as middleware so that it can implemented wherever file upload is necessary

HTTP Crash Course:
HTTP vs HTTPS
-> only difference in protocol, no difference in technology and rules
-> HTTP: sends data in clear text, HTTPS: sends data in encrypted form

URL: uniform resource locator -> location of resource
URI: uniform resource identifier -> identity of resource
URN: uniform resource name -> name of resource
-> specifies where to talk to for data?

HTTP headers:
-> required to send information along with requests -> headers
-> metadata: information about data: when was it created, modified, owner, size, etc. key value pairs sent along with request response
functions: caching data from cached database, authentication(headers contains bearerToken, cookies values,etc), manage state(eg: user state: logged in, guest user, already some data in saved cart, etc)
-> earlier in headers keeping x-prefix was mandatory, but now deprecated (just a convention)
-> types of headers:
1. request headers: from client
2. response headers: from server (standardisation important)
3. representation headers: dictates encoding / compression (for applications like graph-chart, razor pay, mobile applications, etc)
4. payload headers: data
.. and many more

most common errors:
1. accept: application/json -> tells which type of data is accepted by server
2. user-agent: tells from which application has sent the request: url(browser-type), postman, application, etc
3. authorization
4. content-type
5. cookie: key-value pairs containing time to expire, time to login, etc
6. cache-control: tells after how much time to expire data from cache, etc

CORS:
Access control allow origin: allowed origins of requests
Access control allow credentials: credentials allowed
Access control allow method: http methods allowed

security:
cross origin embedder policy
cross origin opener policy
content security policy
x-xss-protection

HTTP Methods:
Basic set of operations that can be used to interact with server 
GET: retrieve a resource
HEAD: no message body(response headers only)
OPTIONS: what operations are available -> defines what all methods are allowed at specific endpoint
TRACE: loopback test(get some data) -> to detect the path followed by data from source to destination to detect any problems or in case of lagging, etc
DELETE: remove a resource
PUT: replace a resource
POST: interact with a resource(mostly add)
PATCH: change part of resource

HTTP status code:
1xx: informational - pass some information to user
-> 100: continue
-> 102: processing
2xx: success of operation executed
-> 200: ok
-> 201: created
-> 202: accepted - just inform the user that server has accepted the data sent by user
3xx: redirectional
-> 307: temporary redirect 
-> 308: permananent redirect
4xx: client error
-> 400: bad request
-> 401: unauthorised
-> 402: payment required
-> 404: not found
5xx: server error
-> 500: internal server error - server down, server outage
-> 504: gateway timeout

Routers and controllers: usually routes are imported in app.js file 
since we have separted all routes in router folder we would require middleware to import them in app.js file

standard practice for urls: /api/v1 : api denotes this is api, v1 denotes this is version 1

possible errors in database connection:
-> atlas ip allow, password proper (no special characters)
-> proper connections

----------------------------------------------------------------------------------------

self practice of todos for registering user:
take all fields from req.body
if all fields are not present, sent error message
import user model from models
use mongoose method, insertOne method to insert user
send error messages from mongoose method, basically wrap it in try-catch block
error message will include incorrect or incomplete fields, try of creating new user with same credentials, etc
if error, send appropriate error with status code
if no error send status code success

-----------------------------------------------------------------------------------------

access tokens and refresh tokens:
access tokens: short lived, refresh tokens: longed lived
while access token is alive, whatever resources the user is authorised to use via access token is possible. 
for security reasons, access tokens expires very shortly, and so the user needs to reauthenticate itself by entering it's credentials to access resources. To save user from this pain, refresh token is used. refresh token is long lived and is stored in database and given to user via which it can generate new access tokens to authenticate itself, so that he/she doesn't need to reenter it's credentials
this can be accomplished by giving another endpoint to frontend, which can be hit and new accessToken can be generated or accessToken can be refreshed.

-----------------------------------------------------------------------------------------

self practice of todos for logging user:
-> take user data from req.body - ask for username/email and password
-> check for empty fields
-> validate for email and password
-> if proper credentials, generate access and refresh tokens
-> return logged in user details

-----------------------------------------------------------------------------------------

setup auth middleware for authentication

understanding subscription schema:
we want following information: subscribers count, subscribed count and whether user A has subscribed to channel (user B) or not. we could store them in array of users in user model, but one user can have million subscribers, and storing them in an array would be computationally and resourceful expensive. so we have made a new model

to find subscriber count, count documents where channel == inputChannel whose subscriber count is to be found out
to find subscribed to count, count documents where subscriber == user whose count of how many channels it has subscribed to has to be found out